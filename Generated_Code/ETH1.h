/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : ETH1.h
**     Project     : A058_Pilote_RF_IR_V5
**     Processor   : MK60FN1M0VLQ12
**     Component   : Ethernet_LDD
**     Version     : Component 01.102, Driver 01.05, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2014-07-15, 16:38, # CodeGen: 0
**     Abstract    :
**          This component implements an ethernet controller driver
**          interface. Controls the transmission and reception of
**          ethernet frame fragments.
**     Settings    :
**          Component name                                 : ETH1
**          Device                                         : ENET
**          Settings                                       : 
**            Interface                                    : RMII
**              Management bus                             : Enabled
**                Clock frequency                          : 2.5 MHz
**                Preamble drop                            : Enabled
**                Holdtime                                 : 8 bus cycles
**              RMII speed                                 : 100 Mbps
**            MAC address                                  : 00:04:9F:02:F3:D3
**            Duplex mode                                  : Full duplex
**            Flow control                                 : Enabled
**              Pause frame duration                       : 0
**            Internal loopback                            : Disabled
**            IEEE 1588                                    : Disabled
**            Frame                                        : 
**              Maximum length                             : 1518
**              Truncation length                          : 2048
**              Transmit                                   : 
**                Append CRC                               : yes
**                Insert MAC address                       : no
**                Inter-packet gap                         : 8
**                Insert IP header checksum                : Disabled
**                Insert protocol checksum                 : Disabled
**                Payload alignment                        : Disabled
**              Receive                                    : 
**                Forward CRC                              : yes
**                Payload alignment                        : Disabled
**                Payload length check                     : Disabled
**                Remove padding                           : no
**                Remove padding in short IP frames        : no
**                Filter                                   : 
**                  Control frames                         : Accept
**                  Pause frames                           : Accept
**                  Invalid frames                         : Accept
**                  Wrong IP header checksum               : Accept
**                  Wrong protocol checksum                : Accept
**            Address filter                               : Enabled
**              Broadcast frames                           : Accept
**              Unicast addresses                          : (string list)
**              Multicast addresses                        : (string list)
**            Statistics                                   : Enabled
**              Remote network monitoring                  : Enabled
**              IEEE                                       : Enabled
**            DMA                                          : 
**              Transmit                                   : 
**                Watermark                                : Store and forward
**                Section empty threshold                  : 0
**                Almost empty threshold                   : 8
**                Almost full threshold                    : 8
**              Receive                                    : 
**                Section full threshold                   : 0
**                Section empty threshold                  : 0
**                Almost empty threshold                   : 8
**                Almost full threshold                    : 8
**            Buffers                                      : 
**              Transmit buffer queue size                 : 8
**              Receive buffer queue size                  : 8
**              Receive buffer size                        : 512
**          Interrupt service/event                        : Enabled
**            Transmit                                     : 
**              Transmit frame                             : INT_ENET_Transmit
**              Transmit frame priority                    : medium priority
**            Receive                                      : 
**              Receive frame                              : INT_ENET_Receive
**              Receive frame priority                     : medium priority
**            Others                                       : 
**              MII & Ethernet bus error & Wake-up         : INT_ENET_Error
**              MII & Ethernet bus error & Wake-up priority : medium priority
**          Pins                                           : RMII
**            Management                                   : Enabled
**              MDC pin                                    : ADC0_SE9/ADC1_SE9/ADC2_SE9/ADC3_SE9/TSI0_CH6/PTB1/I2C0_SDA/FTM1_CH1/RMII0_MDC/MII0_MDC/FTM1_QD_PHB
**              MDC pin signal                             : 
**              MDIO pin                                   : ADC0_SE8/ADC1_SE8/ADC2_SE8/ADC3_SE8/TSI0_CH0/PTB0/LLWU_P5/I2C0_SCL/FTM1_CH0/RMII0_MDIO/MII0_MDIO/FTM1_QD_PHA
**              MDIO pin signal                            : 
**            Transmit                                     : 
**              TXD0 pin                                   : CMP3_IN2/PTA16/SPI0_SOUT/UART0_CTS_b/UART0_COL_b/RMII0_TXD0/MII0_TXD0/I2S0_RX_FS/I2S0_RXD1
**              TXD0 pin signal                            : 
**              TXD1 pin                                   : ADC1_SE17/PTA17/SPI0_SIN/UART0_RTS_b/RMII0_TXD1/MII0_TXD1/I2S0_MCLK
**              TXD1 pin signal                            : 
**              TXEN pin                                   : CMP3_IN1/PTA15/SPI0_SCK/UART0_RX/RMII0_TXEN/MII0_TXEN/I2S0_RXD0
**              TXEN pin signal                            : 
**            Receive                                      : 
**              RXDV_CRS pin                               : CMP3_IN0/PTA14/SPI0_PCS0/UART0_TX/RMII0_CRS_DV/MII0_RXDV/I2S0_RX_BCLK/I2S0_TXD1
**              RXDV_CRS pin signal                        : 
**              RXD0 pin                                   : CMP2_IN1/PTA13/LLWU_P4/CAN0_RX/FTM1_CH1/RMII0_RXD0/MII0_RXD0/I2S0_TX_FS/FTM1_QD_PHB
**              RXD0 pin signal                            : 
**              RXD1 pin                                   : CMP2_IN0/PTA12/CAN0_TX/FTM1_CH0/RMII0_RXD1/MII0_RXD1/I2S0_TXD0/FTM1_QD_PHA
**              RXD1 pin signal                            : 
**              RXER                                       : Disabled
**            REF_CLK pin                                  : EXTAL0/PTA18/FTM0_FLT2/FTM_CLKIN0
**            REF_CLK pin signal                           : 
**          Initialization                                 : 
**            Enable device                                : yes
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnFrameTransmitted                         : Enabled
**              OnFrameReceived                            : Enabled
**              OnFrameTransmittedTimestamped              : Disabled
**              OnFrameReceivedTimestamped                 : Disabled
**              OnMIIFinished                              : Disabled
**              OnWakeUp                                   : Disabled
**              OnFatalError                               : Enabled
**            Sleep mode                                   : Disabled
**            Debug                                        : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**     Contents    :
**         Init         - LDD_TDeviceData* ETH1_Init(LDD_TUserData *UserDataPtr);
**         Deinit       - void ETH1_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         SendFrame    - LDD_TError ETH1_SendFrame(LDD_TDeviceData *DeviceDataPtr, LDD_ETH_TBufferDesc...
**         ReceiveFrame - LDD_TError ETH1_ReceiveFrame(LDD_TDeviceData *DeviceDataPtr, uint8_t*...
**         ReadMII      - LDD_TError ETH1_ReadMII(LDD_TDeviceData *DeviceDataPtr, uint8_t PhyAddr,...
**         WriteMII     - LDD_TError ETH1_WriteMII(LDD_TDeviceData *DeviceDataPtr, uint8_t PhyAddr,...
**         GetMIIResult - LDD_TError ETH1_GetMIIResult(LDD_TDeviceData *DeviceDataPtr, uint16_t *Data);
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file ETH1.h
** @version 01.05
** @brief
**          This component implements an ethernet controller driver
**          interface. Controls the transmission and reception of
**          ethernet frame fragments.
*/         
/*!
**  @addtogroup ETH1_module ETH1 module documentation
**  @{
*/         

#ifndef __ETH1_H
#define __ETH1_H

/* MODULE ETH1 */

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 

/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define ETH1_PRPH_BASE_ADDRESS  0x400C0000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define ETH1_Init_METHOD_ENABLED       /*!< Init method of the component ETH1 is enabled (generated) */
#define ETH1_Deinit_METHOD_ENABLED     /*!< Deinit method of the component ETH1 is enabled (generated) */
#define ETH1_SendFrame_METHOD_ENABLED  /*!< SendFrame method of the component ETH1 is enabled (generated) */
#define ETH1_ReceiveFrame_METHOD_ENABLED /*!< ReceiveFrame method of the component ETH1 is enabled (generated) */
#define ETH1_ReadMII_METHOD_ENABLED    /*!< ReadMII method of the component ETH1 is enabled (generated) */
#define ETH1_WriteMII_METHOD_ENABLED   /*!< WriteMII method of the component ETH1 is enabled (generated) */
#define ETH1_GetMIIResult_METHOD_ENABLED /*!< GetMIIResult method of the component ETH1 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */
#define ETH1_OnFrameTransmitted_EVENT_ENABLED /*!< OnFrameTransmitted event of the component ETH1 is enabled (generated) */
#define ETH1_OnFrameReceived_EVENT_ENABLED /*!< OnFrameReceived event of the component ETH1 is enabled (generated) */
#define ETH1_OnFatalError_EVENT_ENABLED /*!< OnFatalError event of the component ETH1 is enabled (generated) */



/*
** ===================================================================
**     Method      :  ETH1_Init (component Ethernet_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property <"Enable device"> is set to "yes" then the device
**         is also enabled (see the description of the <Enable> method).
**         In this case the <Enable> method is not necessary and need
**         not to be generated. This method can be called only once.
**         Before the second call of Init the <Deinit> method must be
**         called first.
**     @param
**         UserDataPtr     - Pointer to a user data
**                           structure.
**     @return
**                         - Pointer to the device data structure. 
*/
/* ===================================================================*/
LDD_TDeviceData* ETH1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  ETH1_Deinit (component Ethernet_LDD)
*/
/*!
**     @brief
**         Deinitializes the device. Switches off the device, frees the
**         device data structure memory, interrupt vectors, etc.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure.
*/
/* ===================================================================*/
void ETH1_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  ETH1_SendFrame (component Ethernet_LDD)
*/
/*!
**     @brief
**         Initiates a frame transmission. Frame contents are defined
**         by the specified list of buffer descriptors. Frames are
**         internally queued. The end of the frame transmission is
**         signalized by the OnFrameTransmitted event.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure.
**     @param
**         BufferDescListPtr - Pointer to
**                           list of buffer descriptors defining
**                           contents of one frame.
**     @param
**         BufferDescCount - Number of buffer
**                           descriptors in the list.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_DISABLED - The component is disabled
**                           ERR_QFULL - Frame queue is full
**                           ERR_PARAM_ADDRESS - Invalid address
**                           alignment (one or more buffer address from
**                           the list of buffer descriptors is
**                           misaligned)
**                           ERR_PARAM_LENGTH - Invalid frame length
**                           (sum of buffer sizes from the list of
**                           buffer descriptors is greater than maximum
**                           frame length)
*/
/* ===================================================================*/
LDD_TError ETH1_SendFrame(LDD_TDeviceData *DeviceDataPtr, LDD_ETH_TBufferDesc *BufferDescListPtr, uint16_t BufferDescCount);

/*
** ===================================================================
**     Method      :  ETH1_ReceiveFrame (component Ethernet_LDD)
*/
/*!
**     @brief
**         Initiates frame receptions. Frame contents will be placed
**         into buffers specified by the list of buffers. Frames are
**         internally queued. The end of a frame reception is
**         signalized by the OnFrameReceived event.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure.
**     @param
**         BufferListPtr   - Pointer to list of
**                           buffers defining where to store contents of
**                           received frames.
**     @param
**         BufferCount     - Number of buffers in the
**                           list.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_DISABLED - The component is disabled
**                           ERR_QFULL - Frame queue is full
**                           ERR_PARAM_ADDRESS - Invalid address
**                           alignment (one or more buffer address from
**                           the list of buffers is misaligned)
*/
/* ===================================================================*/
LDD_TError ETH1_ReceiveFrame(LDD_TDeviceData *DeviceDataPtr, uint8_t* *BufferListPtr, uint16_t BufferCount);

/*
** ===================================================================
**     Method      :  ETH1_ReadMII (component Ethernet_LDD)
*/
/*!
**     @brief
**         Initiates a MII register read operation. The end of the
**         operation is signalized by the OnMIIFinished event in the
**         interrupt mode or by the GetMIIResult method in the polled
**         mode. The value of the register is returned by the
**         GetMIIResult method. This method is available only if
**         management bus is enabled.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure.
**     @param
**         PhyAddr         - PHY device address.
**     @param
**         RegAddr         - MII register address.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_DISABLED - The component is disabled
*/
/* ===================================================================*/
LDD_TError ETH1_ReadMII(LDD_TDeviceData *DeviceDataPtr, uint8_t PhyAddr, uint8_t RegAddr);

/*
** ===================================================================
**     Method      :  ETH1_WriteMII (component Ethernet_LDD)
*/
/*!
**     @brief
**         Initiates a MII register write operation. The end of the
**         operation is signalized by the OnMIIFinished event in the
**         interrupt mode or by the GetMIIResult method in the polled
**         mode. This method is available only if management bus is
**         enabled.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure.
**     @param
**         PhyAddr         - PHY device address.
**     @param
**         RegAddr         - MII register address.
**     @param
**         Data            - MII register value.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_DISABLED - The component is disabled
*/
/* ===================================================================*/
LDD_TError ETH1_WriteMII(LDD_TDeviceData *DeviceDataPtr, uint8_t PhyAddr, uint8_t RegAddr, uint16_t Data);

/*
** ===================================================================
**     Method      :  ETH1_GetMIIResult (component Ethernet_LDD)
*/
/*!
**     @brief
**         If the MII operation has finished, the variable pointed by
**         the Data parameter will contain the value of the addressed
**         MII register. This method is available only if management
**         bus is enabled.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure.
**     @param
**         Data            - Pointer to a variable, where the value
**                           of the MII register will be stored.
**     @return
**                         - 
**                           Error code, possible values:
**                           ERR_OK - OK
**                           ERR_SPEED - The component does not work in
**                           the active clock configuration
**                           ERR_DISABLED - The component is disabled
**                           ERR_BUSY - MII operation in progress
**                           (available only if the OnMIIFinished event
**                           is disabled)
*/
/* ===================================================================*/
LDD_TError ETH1_GetMIIResult(LDD_TDeviceData *DeviceDataPtr, uint16_t *Data);

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_DECL_VAR
**     Description :
**         Declares a queue structure variable.
**     Parameters  :
**         NAME  - DESCRIPTION
**         Type  - Queue item type.
**         Size  - Number of items in the queue.
**         Name  - Queue structure variable name.
**         Align - Memory aligment of the queue data (in bytes).
**                 Possible values: 1-65535
**     Evaluates to:
**         Variable declaration.
** ===================================================================
*/
#define LDD_QUEUE_DECL_VAR(Type, Size, Name, Align) \
  struct { uint16_t _Size, _Head, _Tail; uint8_t _Ptr[(((Size) + 1U) * sizeof(Type)) + ((Align) - 1U)]; Type* _Data; Type* _Last; } Name;

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_INIT
**     Description :
**         Initializes a queue structure variable.
**     Parameters  :
**         NAME  - DESCRIPTION
**         Type  - Queue item type.
**         Name  - Queue structure variable name.
**         Align - Memory aligment of the queue data (in bytes).
**                 Possible values: 1-65535
** ===================================================================
*/
#define LDD_QUEUE_INIT(Type, Name, Align) \
  (Name)._Size = (uint16_t)(((uint16_t)sizeof((Name)._Ptr) - ((Align) - 1U)) / (uint16_t)sizeof(Type)); \
  (Name)._Head = 0U; \
  (Name)._Tail = 0U; \
  (Name)._Data = (Type*)((((uint32_t)(Name)._Ptr % (Align)) == 0U) ? (uint32_t)(Name)._Ptr : ((uint32_t)(Name)._Ptr + ((Align) - ((uint32_t)(Name)._Ptr % (Align))))); \
  (Name)._Last = (Name)._Data + ((Name)._Size - 1U)

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_IS_EMPTY
**     Description :
**         Checks if queue is empty.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**     Evaluates to:
**         bool - True, if queue is empty.
** ===================================================================
*/
#define LDD_QUEUE_IS_EMPTY(Name) \
  ((Name)._Head == (Name)._Tail)

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_IS_FULL
**     Description :
**         Checks if queue is full.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**     Evaluates to:
**         bool - True, if queue is empty.
** ===================================================================
*/
#define LDD_QUEUE_IS_FULL(Name) \
  ((Name)._Head == (uint16_t)(((Name)._Tail + 1U) % (Name)._Size))

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_INSERT
**     Description :
**         Inserts a copy of the specified item to the tail
**         of the queue.
**         Should be called only if LDD_QUEUE_IS_FULL
**         evaluates to false.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**         Item - Queue item to insert.
**         Temp - Temporary variable used to keep write operations
**                atomic. Expected type: uint16_t
** ===================================================================
*/
#define LDD_QUEUE_INSERT(Name, Item, Temp) \
  (Name)._Data[(Name)._Tail] = (Item); \
  (Temp) = (uint16_t)(((Name)._Tail + 1U) % (Name)._Size); \
  (Name)._Tail = (Temp)

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_REMOVE
**     Description :
**         Removes the item from the head of the queue and returns
**         its copy in a parameter.
**         Should be called only if LDD_QUEUE_IS_EMPTY
**         evaluates to false.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**         Item - Queue item variable, where the removed item is
**                copied to.
**         Temp - Temporary variable used to keep write operations
**                atomic. Expected type: uint16_t
** ===================================================================
*/
#define LDD_QUEUE_REMOVE(Name, Item, Temp) \
  (Item) = (Name)._Data[(Name)._Head]; \
  (Temp) = (uint16_t)(((Name)._Head + 1U) % (Name)._Size); \
  (Name)._Head = (Temp)

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_REMOVE_AND_DROP
**     Description :
**         Removes the item from the head of the queue.
**         Should be called only if LDD_QUEUE_IS_EMPTY
**         evaluates to false.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**         Temp - Temporary variable used to keep write operations
**                atomic. Expected type: uint16_t
** ===================================================================
*/
#define LDD_QUEUE_REMOVE_AND_DROP(Name, Temp) \
  (Temp) = (uint16_t)(((Name)._Head + 1U) % (Name)._Size); \
  (Name)._Head = (Temp)

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_GET_ITEM_COUNT
**     Description :
**         Returns the number of items in the queue.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**         Temp - Temporary variable used to keep write operations
**                atomic. Expected type: uint16_t
**     Evaluates to:
**         uint16_t - Number of items in the queue.
** ===================================================================
*/
#define LDD_QUEUE_GET_ITEM_COUNT(Name, Temp) \
  ((Temp) = (Name)._Tail, (((Name)._Head > (Temp)) ? (((Temp) + (Name)._Size) - (Name)._Head) : ((Temp) - (Name)._Head)))

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_GET_FREE_COUNT
**     Description :
**         Returns the number of free items in the queue.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**         Temp - Temporary variable used to keep write operations
**                atomic. Expected type: uint16_t
**     Evaluates to:
**         uint16_t - Number of free items in the queue.
** ===================================================================
*/
#define LDD_QUEUE_GET_FREE_COUNT(Name, Temp) \
  (((Temp) = (Name)._Head), ((((Name)._Tail >= (Temp)) ? (((Temp) + (Name)._Size) - (Name)._Tail) : ((Temp) - (Name)._Tail)) - 1U))

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_GET_HEAD_ITEM
**     Description :
**         Returns the item from the head of the queue.
**         Should be called only if LDD_QUEUE_IS_EMPTY
**         evaluates to false.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**     Evaluates to:
**         Queue item - Item on the head of the queue.
** ===================================================================
*/
#define LDD_QUEUE_GET_HEAD_ITEM(Name) \
  ((Name)._Data[(Name)._Head])

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_GET_HEAD_OFFSET_ITEM
**     Description :
**         Returns the item placed on the specified position relative
**         to the head of the queue in direction from head to tail.
**         Should be called only if LDD_QUEUE_IS_EMPTY
**         evaluates to false.
**     Parameters  :
**         NAME   - DESCRIPTION
**         Name   - Queue structure variable name.
**         Offset - Position of the item from the head of the queue
**                  in direction to the tail. (0 is the item
**                  on the head, LDD_QUEUE_GET_ITEM_COUNT(Name) - 1
**                  is the item on the tail.)
**                  Possible values:
**                      0..(LDD_QUEUE_GET_ITEM_COUNT(Name) - 1)
**     Evaluates to:
**         Queue item - The specified item.
** ===================================================================
*/
#define LDD_QUEUE_GET_HEAD_OFFSET_ITEM(Name, Offset) \
  ((Name)._Data[((Name)._Head + (Offset)) % (Name)._Size])

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_GET_TAIL_ITEM
**     Description :
**         Returns the item on the tail of the queue.
**         Should be called only if LDD_QUEUE_IS_EMPTY
**         evaluates to false.
**     Parameters  :
**         NAME  - DESCRIPTION
**         Name  - Queue structure variable name.
**     Evaluates to:
**         Queue item - Item on the tail of the queue.
** ===================================================================
*/
#define LDD_QUEUE_GET_TAIL_ITEM(Name) \
  ((Name)._Data[(((Name)._Tail > 0U) ? ((Name)._Tail - 1U) : ((Name)._Size - 1U))])

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_GET_TAIL_OFFSET_ITEM
**     Description :
**         Returns the item placed on the specified position relative
**         to the tail of the queue in direction from tail to head.
**         Should be called only if LDD_QUEUE_IS_EMPTY
**         evaluates to false.
**     Parameters  :
**         NAME   - DESCRIPTION
**         Name   - Queue structure variable name.
**         Offset - Position of the item from the tail of the queue
**                  in direction to the head. (0 is the item
**                  on the tail, LDD_QUEUE_GET_ITEM_COUNT(Name) - 1
**                  is the item on the head.)
**                  Possible values:
**                      0..(LDD_QUEUE_GET_ITEM_COUNT(Name) - 1)
**     Evaluates to:
**         Queue item - The specified item.
** ===================================================================
*/
#define LDD_QUEUE_GET_TAIL_OFFSET_ITEM(Name, Offset) \
  ((Name)._Data[(Name)._Tail + (((((Name)._Tail < ((Offset) + 1U)) ? (Name)._Size : 0U) - 1U) - (Offset))])

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_GET_DATA_START
**     Description :
**         Returns a pointer to the first item in the internal queue
**         item array.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**     Evaluates to:
**         Pointer to a queue item - Pointer to the start of
**                                   the internal queue item array.
** ===================================================================
*/
#define LDD_QUEUE_GET_DATA_START(Name) \
  ((Name)._Data)

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_GET_DATA_END
**     Description :
**         Returns a pointer to the last item in the internal queue
**         item array.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**     Evaluates to:
**         Pointer to a queue item - Pointer to the end of
**                                   the internal queue item array.
** ===================================================================
*/
#define LDD_QUEUE_GET_DATA_END(Name) \
  ((Name)._Last)

/*
** ===================================================================
**     Macro       :  LDD_QUEUE_IS_DATA_END
**     Description :
**         Checks if the next inserted item will be placed
**         to the last item in the internal queue item array.
**     Parameters  :
**         NAME - DESCRIPTION
**         Name - Queue structure variable name.
**     Evaluates to:
**         bool - True, if the next inserted item will be placed
**                to the end of the internal queue item array.
** ===================================================================
*/
#define LDD_QUEUE_IS_DATA_END(Name) \
  ((Name)._Tail == ((Name)._Size - 1U))

/* Endianness correction macros */
#define ETH1_BE_TO_NE16(x) ((uint16_t)((uint16_t)(x) >> 8) | (uint16_t)((uint16_t)(x) << 8)) /* Big endian to native endian 16-bit */
#define ETH1_BE_TO_NE32(x) (((uint32_t)((uint32_t)(x) >> 24) & 0xFFU) | ((uint32_t)((uint32_t)(x) >> 8) & 0xFF00U) | ((uint32_t)((uint32_t)(x) << 8) & 0xFF0000U) | ((uint32_t)((uint32_t)(x) << 24) & 0xFF000000U)) /* Big endian to native endian 32-bit */
#define ETH1_NE_TO_BE16(x) ((uint16_t)((uint16_t)(x) >> 8) | (uint16_t)((uint16_t)(x) << 8)) /* Native endian to big endian 16-bit */
#define ETH1_NE_TO_BE32(x) (((uint32_t)((uint32_t)(x) >> 24) & 0xFFU) | ((uint32_t)((uint32_t)(x) >> 8) & 0xFF00U) | ((uint32_t)((uint32_t)(x) << 8) & 0xFF0000U) | ((uint32_t)((uint32_t)(x) << 24) & 0xFF000000U)) /* Native endian to big endian 32-bit */

/* Transmit ring buffer flag masks */
#define ETH1_TX_READY          ETH1_BE_TO_NE16(0x8000U) /* The buffer is ready for transmission */
#define ETH1_TX_TO1            ETH1_BE_TO_NE16(0x4000U) /* Transmit software ownership (not modified by hardware) */
#define ETH1_TX_WRAP           ETH1_BE_TO_NE16(0x2000U) /* The next buffer descriptor is on the ring start */
#define ETH1_TX_TO2            ETH1_BE_TO_NE16(0x1000U) /* Transmit software ownership (not modified by hardware) */
#define ETH1_TX_LAST_IN_FRAME  ETH1_BE_TO_NE16(0x0800U) /* The last buffer in the frame */
#define ETH1_TX_APPEND_CRC     ETH1_BE_TO_NE16(0x0400U) /* Transmit the CRC sequence after the last data byte */
#define ETH1_TX_APPEND_BAD_CRC ETH1_BE_TO_NE16(0x0200U) /* Transmit the CRC sequence inverted after the last data byte */

/* Internal transmit queue item (transmit ring buffer descriptor) */
typedef struct {
  uint16_t Flags;                      /* Buffer flags */
  uint16_t Length;                     /* Buffer data length */
  uint8_t  *Data;                      /* Buffer data pointer */
} ETH1_TTxQueueItem;

/* Receive ring buffer flag masks */
#define ETH1_RX_EMPTY           ETH1_BE_TO_NE16(0x8000U) /* The buffer is empty */
#define ETH1_RX_RO1             ETH1_BE_TO_NE16(0x4000U) /* Receive software ownership (not modified by hardware) */
#define ETH1_RX_WRAP            ETH1_BE_TO_NE16(0x2000U) /* The next buffer descriptor is on the ring start */
#define ETH1_RX_RO2             ETH1_BE_TO_NE16(0x1000U) /* Receive software ownership (not modified by hardware) */
#define ETH1_RX_LAST_IN_FRAME   ETH1_BE_TO_NE16(0x0800U) /* The last buffer in the frame */
#define ETH1_RX_MISS            ETH1_BE_TO_NE16(0x0100U) /* The frame was received because of promiscuous mode */
#define ETH1_RX_BROADCAST       ETH1_BE_TO_NE16(0x0080U) /* Destination address is broadcast */
#define ETH1_RX_MULTICAST       ETH1_BE_TO_NE16(0x0040U) /* Destination address is multicast */
#define ETH1_RX_FRAME_LEN_ERROR ETH1_BE_TO_NE16(0x0020U) /* Receive frame length violation */
#define ETH1_RX_ALIGN_ERROR     ETH1_BE_TO_NE16(0x0010U) /* Receive non-octet aligned frame */
#define ETH1_RX_CRC_ERROR       ETH1_BE_TO_NE16(0x0004U) /* Receive CRC error */
#define ETH1_RX_OVERRUN         ETH1_BE_TO_NE16(0x0002U) /* Hardware FIFO overrun */
#define ETH1_RX_FRAME_TRUNCATED ETH1_BE_TO_NE16(0x0001U) /* Receive frame is truncated */

/* Internal receive queue item (receive ring buffer descriptor) */
typedef struct {
  uint16_t Flags;                      /* Buffer flags */
  uint16_t Length;                     /* Buffer data length */
  uint8_t  *Data;                      /* Buffer data pointer */
} ETH1_TRxQueueItem;

#define ETH1_TX_QUEUE_SIZE   8U        /* Transmit queue size */
#define ETH1_RX_QUEUE_SIZE   8U        /* Receive queue size */
#define ETH1_QUEUE_MEM_ALIGN 16U       /* Queue memory alignment required by hardware */

/* Internal device data structure */
typedef struct {
  bool                  Enabled;       /* Indicates whether the device is enabled */
  LDD_ETH_TDuplexMode   DuplexMode;    /* Duplex mode */
  LDD_ETH_TFilterMode   FilterMode;    /* Filter mode */
  LDD_ETH_TSleepMode    SleepMode;     /* Sleep mode */
  LDD_QUEUE_DECL_VAR(ETH1_TTxQueueItem, ETH1_TX_QUEUE_SIZE, TxQueue, ETH1_QUEUE_MEM_ALIGN) /* Transmit frame buffer queue */
  LDD_QUEUE_DECL_VAR(ETH1_TRxQueueItem, ETH1_RX_QUEUE_SIZE, RxQueue, ETH1_QUEUE_MEM_ALIGN) /* Receive frame buffer queue */
  LDD_TUserData         *UserDataPtr;  /* User data structure */
  LDD_TEventMask        EventMask;     /* Event mask used for run-time enabling and disabling of events */
  uint8_t               Index;         /* Component instance index (for Deinit method distinction) */
  LDD_TClockConfiguration SpeedMode;   /* Clock configuration currently set */
  bool                  EnabledMode;   /* Indicates whether the device is enabled in the current clock configuration */
} ETH1_TDeviceData;


/*
** ===================================================================
**     Method      :  ETH1_InterruptTxFrame (component Ethernet_LDD)
**
**     Description :
**         Transmit frame interrupt handler.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {FreeRTOS RTOS Adapter} ISR function prototype */
PE_ISR(ETH1_InterruptTxFrame);

/*
** ===================================================================
**     Method      :  ETH1_InterruptRxFrame (component Ethernet_LDD)
**
**     Description :
**         Receive frame interrupt handler.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {FreeRTOS RTOS Adapter} ISR function prototype */
PE_ISR(ETH1_InterruptRxFrame);

/*
** ===================================================================
**     Method      :  ETH1_InterruptShared (component Ethernet_LDD)
**
**     Description :
**         Shared interrupt handler.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/
/* {FreeRTOS RTOS Adapter} ISR function prototype */
PE_ISR(ETH1_InterruptShared);

/* END ETH1 */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __ETH1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.4 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
