=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "FRTOS"     (component FreeRTOS)
   - FRTOS_xTaskCreate -Create a new task and add it to the list of tasks that are ready to run.
   - FRTOS_vTaskStartScheduler -Starts the real time kernel tick processing. After calling the kernel has control over which 
                tasks are executed and when.   The idle task is created automatically when vTaskStartScheduler() is called.   
                If vTaskStartScheduler() is successful the function will not return until an executing task calls 
                vTaskEndScheduler(). The function might fail and return immediately if there is insufficient RAM available for 
                the idle task to be created.
   - FRTOS_vTaskSuspend -Suspend any task. When suspended a task will never get any microcontroller processing time, no matter 
                what its priority. Calls to vTaskSuspend are not accumulative - i.e. calling vTaskSuspend() twice on the same 
                task still only requires one call to vTaskResume() to ready the suspended task.
   - FRTOS_vTaskSuspendAll -Suspends all real time kernel activity while keeping interrupts (including the kernel tick) enabled.
                After calling vTaskSuspendAll () the calling task will continue to execute without risk of being swapped out 
                until a call to xTaskResumeAll () has been made.   API functions that have the potential to cause a context 
                switch (for example, vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler is suspended.
   - FRTOS_vTaskResume -Resumes a suspended task. A task that has been suspended by one of more calls to vTaskSuspend() will be 
                made available for running again by a single call to vTaskResume().
   - FRTOS_xTaskResumeAll -Resumes real time kernel activity following a call to vTaskSuspendAll (). After a call to 
                xTaskSuspendAll () the kernel will take control of which task is executing at any time.
   - FRTOS_xTaskResumeFromISR -An implementation of vTaskResume() that can be called from within an ISR. A task that has been 
                suspended by one of more calls to vTaskSuspend() will be made available for running again by a single call to 
                xTaskResumeFromISR().
   - FRTOS_taskYIELD -Macro for forcing a context switch.
   - FRTOS_taskENTER_CRITICAL -Macro to mark the start of a critical code region. Preemptive context switches cannot occur when 
                in a critical region.      NOTE: This may alter the stack (depending on the portable implementation) so must be 
                used with care!
   - FRTOS_taskEXIT_CRITICAL -Macro to mark the end of a critical code region. Preemptive context switches cannot occur when in 
                a critical region.      NOTE: This may alter the stack (depending on the portable implementation) so must be 
                used with care!
   - FRTOS_taskDISABLE_INTERRUPTS -Macro to disable all maskable interrupts.
   - FRTOS_taskENABLE_INTERRUPTS -Macro to enable microcontroller interrupts.
   - FRTOS_vTaskDelay -Delay a task for a given number of ticks. The actual time that the task remains blocked depends on the 
                tick rate. The constant portTICK_RATE_MS can be used to calculate real time from the tick rate - with the 
                resolution of one tick period.      vTaskDelay() specifies a time at which the task wishes to unblock relative 
                to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the 
                task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method 
                of controlling the frequency of a cyclical task as the path taken through the code, as well as other task and 
                interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which 
                the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed 
                frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the 
                calling task should unblock.
   - FRTOS_vTaskDelayUntil -Delay a task until a specified time. This function can be used by cyclical tasks to ensure a 
                constant execution frequency.      This function differs from vTaskDelay() in one important aspect: 
                vTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is 
                called, whereas vTaskDelayUntil() specifies an absolute time at which the task wishes to unblock.      
                vTaskDelay() will cause a task to block for the specified number of ticks from the time vTaskDelay() is called. 
                It is therefore difficult to use vTaskDelay() by itself to generate a fixed execution frequency as the time 
                between a task unblocking following a call to vTaskDelay() and that task next calling vTaskDelay() may not be 
                fixed [the task may take a different path though the code between calls, or may get interrupted or preempted a 
                different number of times each time it executes].      Whereas vTaskDelay() specifies a wake time relative to 
                the time at which the function is called, vTaskDelayUntil() specifies the absolute (exact) time at which it 
                wishes to unblock.      It should be noted that vTaskDelayUntil() will return immediately (without blocking) if 
                it is used to specify a wake time that is already in the past. Therefore a task using vTaskDelayUntil() to 
                execute periodically will have to re-calculate its required wake time if the periodic execution is halted for 
                any reason (for example, the task is temporarily placed into the Suspended state) causing the task to miss one 
                or more periodic executions. This can be detected by checking the variable passed by reference as the 
                pxPreviousWakeTime parameter against the current tick count. This is however not necessary under most usage 
                scenarios.      The constant portTICK_RATE_MS can be used to calculate real time from the tick rate - with the 
                resolution of one tick period.      This function must not be called while the scheduler has been suspended by 
                a call to vTaskSuspendAll().
   - FRTOS_uxTaskPriorityGet -Obtain the priority of any task.
   - FRTOS_vTaskPrioritySet -Set the priority of any task.
   - FRTOS_xTaskGetTickCount -Return the count of ticks since vTaskStartScheduler was called.
   - FRTOS_xTaskGetTickCountFromISR -A version of xTaskGetTickCount() that can be called from an ISR.
   - FRTOS_xSemaphoreCreateRecursiveMutex -Macro that implements a recursive mutex by using the existing queue mechanism.   
                Mutexes created using this macro can be accessed using the xSemaphoreTakeRecursive() and 
                xSemaphoreGiveRecursive() macros.  The  xSemaphoreTake() and xSemaphoreGive() macros should not be used.   A 
                mutex used recursively can be 'taken' repeatedly by the owner. The mutex doesn't become available again until 
                the owner has called xSemaphoreGiveRecursive() for each successful 'take' request.  For example, if a task 
                successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has 
                also  'given' the mutex back exactly five times.   This type of semaphore uses a priority inheritance mechanism 
                so a task 'taking' a semaphore MUST ALWAYS 'give' the semaphore back once the semaphore it is no longer 
                required. Mutex type semaphores cannot be used from within interrupt service routines.   See 
                vSemaphoreCreateBinary() for an alternative implementation that can be used for pure synchronisation (where one 
                task or interrupt always 'gives' the semaphore and another always 'takes' the semaphore) and from within 
                interrupt service routines.
   - FRTOS_xSemaphoreTakeRecursive -Macro to recursively obtain, or 'take', a mutex type semaphore. The mutex must have 
                previously been created using a call to xSemaphoreCreateRecursiveMutex();   This macro must not be used on 
                mutexes created using xSemaphoreCreateMutex(). A mutex used recursively can be 'taken' repeatedly by the owner. 
                The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each 
                successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex 
                will not be available to any other task until it has also  'given' the mutex back exactly five times.
   - FRTOS_xSemaphoreGiveRecursive -Macro to recursively release, or 'give', a mutex type semaphore. The mutex must have 
                previously been created using a call to xSemaphoreCreateRecursiveMutex();   This macro must not be used on 
                mutexes created using xSemaphoreCreateMutex(). A mutex used recursively can be 'taken' repeatedly by the owner. 
                The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each 
                successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex 
                will not be available to any other task until it has also  'given' the mutex back exactly five times.
   - FRTOS_xSemaphoreCreateMutex -Macro that creates a mutex semaphore by using the existing queue mechanism.      Mutexes 
                created using this macro can be accessed using the xSemaphoreTake() and xSemaphoreGive() macros. The 
                xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros should not be used.      Mutexes and binary 
                semaphores are very similar but have some subtle differences: Mutexes include a priority inheritance mechanism, 
                binary semaphores do not. This makes binary semaphores the better choice for implementing synchronisation 
                (between tasks or between tasks and an interrupt), and mutexes the better choice for implementing simple mutual 
                exclusion.      The priority of a task that 'takes' a mutex can potentially be raised if another task of higher 
                priority attempts to obtain the same mutex. The task that owns the mutex 'inherits' the priority of the task 
                attempting to 'take' the same mutex. This means the mutex must always be 'given' back - otherwise the higher 
                priority task will never be able to obtain the mutex, and the lower priority task will never 'disinherit' the 
                priority. An example of a mutex being used to implement mutual exclusion is provided on the xSemaphoreTake() 
                documentation page.      A binary semaphore need not be given back once obtained, so task synchronisation can 
                be implemented by one task/interrupt continuously 'giving' the semaphore while another continuously 'takes' the 
                semaphore. This is demonstrated by the sample code on the xSemaphoreGiveFromISR() documentation page.      Both 
                mutex and binary semaphores are assigned to variables of type xSemaphoreHandle and can be used in any API 
                function that takes a parameter of this type.
   - FRTOS_xSemaphoreTake -Macro to obtain a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting().      This macro must not be 
                called from an ISR. xQueueReceiveFromISR() can be used to take a semaphore from within an interrupt if required,
                although this would not be a normal operation. Semaphores use queues as their underlying mechanism, so 
                functions are to some extent interoperable.      xSemaphoreTake() is part of the fully featured intertask 
                communications API. xSemaphoreAltTake() is the alternative API equivalent. Both versions require the same 
                parameters and return the same values.
   - FRTOS_xSemaphoreGive -Macro to release a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting(), and obtained using 
                sSemaphoreTake().      This must not be used from an ISR. See xSemaphoreGiveFromISR() for an alternative which 
                can be used from an ISR.      This macro must also not be used on semaphores created using 
                xSemaphoreCreateRecursiveMutex().      xSemaphoreGive() is part of the fully featured intertask communications 
                API. xSemaphoreAltGive() is the alternative API equivalent. Both versions require the same parameters and 
                return the same values.
   - FRTOS_vSemaphoreCreateBinary -Macro that creates a semaphore by using the existing queue mechanism. The queue length is 1 
                as this is a binary semaphore. The data size is 0 as we don't want to actually store any data - we just want to 
                know if the queue is empty or full.      Binary semaphores and mutexes are very similar but have some subtle 
                differences: Mutexes include a priority inheritance mechanism, binary semaphores do not. This makes binary 
                semaphores the better choice for implementing synchronisation (between tasks or between tasks and an interrupt),
                and mutexes the better choice for implementing simple mutual exclusion.      A binary semaphore need not be 
                given back once obtained, so task synchronisation can be implemented by one task/interrupt continuously 
                'giving' the semaphore while another continuously 'takes' the semaphore. This is demonstrated by the sample 
                code on the xSemaphoreGiveFromISR() documentation page.      The priority of a task that 'takes' a mutex can 
                potentially be raised if another task of higher priority attempts to obtain the same mutex. The task that owns 
                the mutex 'inherits' the priority of the task attempting to 'take' the same mutex. This means the mutex must 
                always be 'given' back - otherwise the higher priority task will never be able to obtain the mutex, and the 
                lower priority task will never 'disinherit' the priority. An example of a mutex being used to implement mutual 
                exclusion is provided on the xSemaphoreTake() documentation page.      Both mutex and binary semaphores are 
                assigned to variables of type xSemaphoreHandle and can be used in any API function that takes a parameter of 
                this type.
   - FRTOS_xSemaphoreCreateCounting -Macro that creates a counting semaphore by using the existing queue mechanism.      
                Counting semaphores are typically used for two things:      1. Counting events.   In this usage scenario an 
                event handler will 'give' a semaphore each time an event occurs (incrementing the semaphore count value), and a 
                handler task will 'take' a semaphore each time it processes an event (decrementing the semaphore count value). 
                The count value is therefore the difference between the number of events that have occurred and the number that 
                have been processed. In this case it is desirable for the initial count value to be zero.      2. Resource 
                management.   In this usage scenario the count value indicates the number of resources available. To obtain 
                control of a resource a task must first obtain a semaphore - decrementing the semaphore count value. When the 
                count value reaches zero there are no free resources. When a task finishes with the resource it 'gives' the 
                semaphore back - incrementing the semaphore count value. In this case it is desirable for the initial count 
                value to be equal to the maximum count value, indicating that all resources are free.
   - FRTOS_xSemaphoreGiveFromISR -Macro to release a semaphore. The semaphore must have previously been created with a call to 
                vSemaphoreCreateBinary() or xSemaphoreCreateCounting().      Mutex type semaphores (those created using a call 
                to xSemaphoreCreateMutex()) must not be used with this macro.      This macro can be used from an ISR.
   - FRTOS_xSemaphoreTakeFromISR -Macro to take a semaphore from an ISR. The semaphore must have previously been created with a 
                call to vSemaphoreCreateBinary() or xSemaphoreCreateCounting().      Mutex type semaphores (those created using 
                a call to xSemaphoreCreateMutex()) must not be used with this macro.      This macro can be used from an ISR, 
                however taking a semaphore from an ISR is not a common operation.  It is likely to only be useful when taking a 
                counting semaphore when an interrupt is obtaining an object from a resource pool (when the semaphore count 
                indicates the number of resources available).
   - FRTOS_vSemaphoreDelete -Delete a semaphore.  This function must be used with care.  For example, do not delete a mutex 
                type semaphore if the mutex is held by a task.
   - FRTOS_xSemaphoreGetMutexHolder -Returns the holder of a mutex or semaphore. If xMutex is indeed a mutex type semaphore, 
                return the current mutex holder. If xMutex is not a mutex type semaphore, or the mutex is available (not held 
                by a task), return NULL. Note: This Is is a good way of determining if the calling task is the mutex holder, 
                but not a good way of determining the identity of the mutex holder as the holder may change between the 
                function exiting and the returned value being tested.
   - FRTOS_pvPortMalloc -Allocates a memory block using the port pvPortMalloc() function
   - FRTOS_vPortFree -Frees a memory block previously allocated with pvPortMalloc()
   - FRTOS_xPortGetFreeHeapSize -Returns the actual free size of the heap
   - FRTOS_xTaskGetSchedulerState -Returns the state of the scheduler
   - FRTOS_uxTaskGetStackHighWaterMark -The stack used by a task will grow and shrink as the task executes and interrupts are 
                processed. uxTaskGetStackHighWaterMark() returns the minimum amount of remaining stack space that was available 
                to the task since the task started executing - that is the amount of stack that remained unused when the task 
                stack was at its greatest (deepest) value. This is what is referred to as the stack 'high water mark'.
   - FRTOS_uxTaskGetNumberOfTasks -Returns the number of tasks
   - FRTOS_uxQueueMessagesWaiting -Queries the number of items that are currently held within a queue.
   - FRTOS_uxQueueMessagesWaitingfromISR -A version of uxQueueMessagesWaiting() that can be used from inside an interrupt 
                service routine.
   - FRTOS_xQueueCreate -Creates a queue.
   - FRTOS_vQueueDelete -Deletes a queue that was previously created using a call to xQueueCreate(). vQueueDelete() can also be 
                used to delete a semaphore.
   - FRTOS_xQueueReset -Reset a queue back to its original empty state.  pdPASS is returned if the queue is successfully reset. 
                pdFAIL is returned if the queue could not be reset because there are tasks blocked on the queue waiting to 
                either receive from the queue or send to the queue.
   - FRTOS_xQueueSendToBack -Sends an item to the back of a queue.
   - FRTOS_xQueueSendToFront -Sends an item to the front of a queue.
   - FRTOS_xQueueReceive -Receives an item from a queue.
   - FRTOS_xQueueOverwrite -This is a macro that calls the xQueueGenericSend() function. A version of xQueueSendToBack() that 
                will write to the queue even if the queue is full, overwriting data that is already held in the queue. 
                xQueueOverwrite() is intended for use with queues that have a length of one, meaning the queue is either empty 
                or full. This function must not be called from an interrupt service routine (ISR). See xQueueOverwriteFromISR() 
                for an alternative which may be used in an ISR.
   - FRTOS_xQueueOverwriteFromISR -This is a macro that calls the xQueueGenericSendFromISR() function. A version of 
                xQueueOverwrite() that can be used in an ISR. xQueueOverwriteFromISR() is similar to xQueueSendToBackFromISR(), 
                but will write to the queue even if the queue is full, overwriting data that is already held in the queue. 
                xQueueOverwriteFromISR() is intended for use with queues that have a length of one, meaning the queue is either 
                empty or full.
   - FRTOS_xQueuePeek -Reads an item from a queue, but does not remove the item from the queue. Therefore the same item would 
                be returned the next time xQueueReceive() or xQueuePeek() was called on the same queue.
   - FRTOS_xQueuePeekFromISR -A version of xQueuePeek() that can be used from an interrupt service routine (ISR). Reads an item 
                from a queue, but does not remove the item from the queue. Therefore the same item would be returned the next 
                time xQueueReceive() or xQueuePeek() was called on the same queue.
   - FRTOS_xQueueSendToBackFromISR -Versions of xQueueSendToBack() API functions that can be called from an ISR. Unlike 
                xQueueSendToBack() these functions do not permit a block time to be specified.
   - FRTOS_xQueueSendToFrontFromISR -Versions of xQueueSendToFront() API functions that can be called from an ISR. Unlike 
                xQueueSendToFront() these functions do not permit a block time to be specified.
   - FRTOS_xQueueReceiveFromISR -A version of xQueueReceive() that can be called from an ISR. Unlike xQueueReceive(), 
                xQueueReceiveFromISR() does not permit a block time to be specified.
   - FRTOS_vQueueAddToRegistry -Assigns a name to a queue and adds the queue to the registry.
   - FRTOS_vQueueUnregisterQueue -Removes a queue from the queue registry.
   - FRTOS_xQueueIsQueueFullFromISR -Queries a queue to determine if the queue is full. This function should only be used in an 
                ISR.
   - FRTOS_xQueueIsQueueEmptyFromISR -Queries a queue to determine if the queue is empty. This function should only be used in 
                an ISR.
   - FRTOS_xEventGroupCreate -Create a new RTOS event group. This function cannot be called from an interrupt.      Event 
                groups are stored in variables of type EventGroupHandle_t. The number of bits (or flags) implemented within an 
                event group is 8 if configUSE_16_BIT_TICKS is set to 1, or 24 if configUSE_16_BIT_TICKS is set to 0. The 
                dependency on configUSE_16_BIT_TICKS results from the data type used for thread local storage in the internal 
                implementation of RTOS tasks.
   - FRTOS_xEventGroupWaitBits -Read bits within an RTOS event group, optionally entering the Blocked state (with a timeout) to 
                wait for a bit or group of bits to become set. This function cannot be called from an interrupt.
   - FRTOS_xEventGroupSetBits -Set bits (flags) within an RTOS event group. This function cannot be called from an interrupt. 
                xEventGroupSetBitsFromISR() is a version that can be called from an interrupt.      Setting bits in an event 
                group will automatically unblock tasks that are blocked waiting for the bits.
   - FRTOS_xEventGroupSetBitsFromISR -Set bits (flags) within an RTOS event group. A version of xEventGroupSetBits() that can 
                be called from an interrupt service routine (ISR).      Setting bits in an event group will automatically 
                unblock tasks that are blocked waiting for the bits.      Setting bits in an event group is not a deterministic 
                operation because there are an unknown number of tasks that may be waiting for the bit or bits being set. 
                FreeRTOS does not allow non-deterministic operations to be performed in interrupts or from critical sections. 
                Therefore xEventGroupSetBitFromISR() sends a message to the RTOS daemon task to have the set operation 
                performed in the context of the daemon task - where a scheduler lock is used in place of a critical section.    
                INCLUDE_xEventGroupSetBitFromISR, configUSE_TIMERS and INCLUDE_xTimerPendFunctionCall must all be set to 1 in 
                FreeRTOSConfig.h for the xEventGroupSetBitsFromISR() function to be available.
   - FRTOS_xEventGroupClearBits -Clear bits (flags) within an RTOS event group. This function cannot be called from an 
                interrupt. See xEventGroupClearBitsFromISR() for a version that can be called from an interrupt.
   - FRTOS_xEventGroupClearBitsFromISR -A version of xEventGroupClearBits() that can be called from an interrupt.
   - FRTOS_xEventGroupGetBits -Returns the current value of the event bits (event flags) in an RTOS event group. This function 
                cannot be used from an interrupt. See xEventGroupsGetBitsFromISR() for a version that can be used in an 
                interrupt.
   - FRTOS_xEventGroupGetBitsFromISR -A version of xEventGroupGetBits() that can be called from an interrupt.
   - FRTOS_xEventGroupSync -Atomically set bits (flags) within an RTOS event group, then wait for a combination of bits to be 
                set within the same event group. This functionality is typically used to synchronise multiple tasks (often 
                called a task rendezvous), where each task has to wait for the other tasks to reach a synchronisation point 
                before proceeding.      This function cannot be used from an interrupt.      The function will return before 
                its block time expires if the bits specified by the uxBitsToWait parameter are set, or become set within that 
                time. In this case all the bits specified by uxBitsToWait will be automatically cleared before the function 
                returns.
   - FRTOS_Init -Low level initialization routine called from startup code. This method ensures that the tick timer is  not 
                enabled.

Module "UTIL"      (component Utility)
   - UTIL_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL_chcat -Adds a single character to a zero byte terminated buffer. It cares about buffer overflow.
   - UTIL_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL_strcatNum8Hex -Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL_strcatNum16Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL_strcatNum24Hex -Appends a 32bit unsigned value to a buffer as hex number (without a 0x prefix). Only 24bits are used.
   - UTIL_strcatNum32Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL_strcatNum32sDotValue100 -Appends a 32bit signed value to a buffer. The value is in 1/100 units.  For example for the 
                value -13456 it will append the string "-134.56"
   - UTIL_IsLeapYear -Returns true if a given year is a leap year
   - UTIL_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL_strcmp -Wrapper to the standard strcmp() routine
   - UTIL_strncmp -Wrapper to the standard strncmp() routine
   - UTIL_strFind -Searches a substring inside a string and returns the position.
   - UTIL_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL_strlen -Wrapper to the standard strlen() function.
   - UTIL_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by writing 
                a zero byte to the string!)

Module "AS1"       (component AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "USB1"      (component FSL_USB_Stack)
   - USB1_Init -Initializes the driver

Module "CS1"       (component CriticalSection)
   - CS1_CriticalVariable -Defines a variable if necessary. This is a macro.
   - CS1_EnterCritical -Enters a critical section
   - CS1_ExitCritical -Exits a critical section

Module "EE241"     (component 24AA_EEPROM)
   - EE241_ReadByte -Reads a single byte from the given memory address
   - EE241_WriteByte -Writes a single byte to specified address
   - EE241_ReadBlock -Read a block of memory.
   - EE241_WriteBlock -Writes a block of data to the EEPROM

Module "WAIT1"     (component Wait)
   - WAIT1_Wait10Cycles -Wait for 10 CPU cycles.
   - WAIT1_Wait100Cycles -Wait for 100 CPU cycles.
   - WAIT1_WaitCycles -Wait for a specified number of CPU cycles (16bit data type).
   - WAIT1_WaitLongCycles -Wait for a specified number of CPU cycles (32bit data type).
   - WAIT1_Waitms -Wait for a specified time in milliseconds.
   - WAIT1_Waitus -Wait for a specified time in microseconds.
   - WAIT1_Waitns -Wait for a specified time in nano seconds.
   - WAIT1_WaitOSms -If an RTOS is enabled, this routine will use a non-blocking wait method. Otherwise it will do a 
                busy/blocking wait.

Module "GI2C1"     (component GenericI2C)
   - GI2C1_SelectSlave -Selects the slave device on the bus. Method might use a semaphore to protect bus access.
   - GI2C1_UnselectSlave -Unselects the device. Method will release a used a semaphore.
   - GI2C1_RequestBus -Starts a critical section for accessing the bus.
   - GI2C1_ReleaseBus -Finishes a critical section for accessing the bus.
   - GI2C1_ReadBlock -Read from the device a block.
   - GI2C1_WriteBlock -Write a block to the device.
   - GI2C1_ReadAddress -Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteAddress -Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)
   - GI2C1_ReadByteAddress8 -Read a byte from the device using an 8bit memory address. This writes (S+i2cAddr+0), (memAddr), 
                (Sr+i2cAddr+1), (data)...(data+P)
   - GI2C1_WriteByteAddress8 -Write a byte to the device using an 8bit memory address: (S+i2cAddr+0), (memAddr), (data)...
                (data+P)
   - GI2C1_ProbeACK -Accesses the bus to check if the device responds with an ACK (ACK polling).
   - GI2C1_GetSemaphore -Returns the currently allocated semaphore.
   - GI2C1_Deinit -Deinitializes the driver.
   - GI2C1_Init -Initializes the driver.

Module "CI2C1"     (component I2C_LDD)
   - CI2C1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc.   If the "Enable in init. code" is set to "yes" value 
                then the device is also enabled(see the description of the Enable() method). In this case the Enable() method 
                is not necessary and needn't to be generated.    This method can be called only once. Before the second call of 
                Init() the Deinit() must be called first.
   - CI2C1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupts 
                vectors, etc.
   - CI2C1_MasterSendBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes inclusive 
                of R/W bit = 0 to the I2C bus and then writes the block of characters to the bus. The slave address must be 
                specified before, by the "SelectSlaveDevice" method or in component initialization section, "Target slave 
                address init" property. If the method returns ERR_OK, it doesn't mean that transmission was successful. The 
                state of transmission is detectable by means of events (OnMasterSendComplete or OnError). Data to be sent are 
                not copied to an internal buffer and remains in the original location. Therefore the content of the buffer 
                should not be changed until the transmission is complete. Event "OnMasterBlockSent"can be used to detect the 
                end of the transmission. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_MasterReceiveBlock -This method writes one (7-bit addressing) or two (10-bit addressing) slave address bytes 
                inclusive of R/W bit = 1 to the I2C bus and then receives the block of characters from the bus. The slave 
                address must be specified before, by the "SelectSlaveDevice" method or in component initialization section, 
                "Target slave address init" property. If the method returns ERR_OK, it doesn't mean that reception was 
                successful. The state of reception is detectable by means of events (OnMasterSendComplete  or OnError). Data to 
                be received are not copied to an internal buffer and remains in the original location. Therefore the content of 
                the buffer should not be changed until the transmission is complete. Event "OnMasterBlockReceived"can be used 
                to detect the end of the reception. This method is available only for the MASTER or MASTER - SLAVE mode.
   - CI2C1_SelectSlaveDevice -This method selects a new slave for communication by its 7-bit slave, 10-bit address or general 
                call value. Any send or receive method directs to or from selected device, until a new slave device is selected 
                by this method. This method is available for the MASTER mode.

Module "PWM1"      (component PWM)
   - PWM1_Enable -This method enables the component - it starts the signal generation. Events may be generated 
                (<DisableEvent>/<EnableEvent>).
   - PWM1_Disable -This method disables the component - it stops the signal generation and events calling. When the timer is 
                disabled, it is possible to call <ClrValue> and <SetValue> methods.
   - PWM1_SetRatio16 -This method sets a new duty-cycle ratio. Ratio is expressed as a 16-bit unsigned integer number. 0 - FFFF 
                value is proportional to ratio 0 - 100%. The method is available only if it is not selected list of predefined 
                values in <Starting pulse width> property.   Note: Calculated duty depends on the timer possibilities and on 
                the selected period.

Module "TU1"       (component TimerUnit_LDD)
   - TU1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU1_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.
   - TU1_GetPeriodTicks -Returns the number of counter ticks before re-initialization. See also method <SetPeriodTicks>. This 
                method is available only if the property <"Counter restart"> is switched to 'on-match' value.
   - TU1_ResetCounter -Resets counter. If counter is counting up then it is set to zero. If counter is counting down then 
                counter is updated to the reload value.   The method is not available if HW doesn't allow resetting of the 
                counter.
   - TU1_GetCounterValue -Returns the content of counter register. This method can be used both if counter is enabled and if 
                counter is disabled. The method is not available if HW doesn't allow reading of the counter.
   - TU1_SetOffsetTicks -Sets the new offset value to channel specified by the parameter ChannelIdx. It is user responsibility 
                to use value below selected period. This method is available when at least one channel is configured.
   - TU1_GetOffsetTicks -Returns the number of counter ticks to compare match channel specified by the parameter ChannelIdx. 
                See also method <SetOffsetTicks>. This method is available when at least one channel is configured.
   - TU1_SelectOutputAction -Sets the type of compare match and counter overflow action on channel output. This method is 
                available when at least one channel is configured.

Module "TI1"       (component TimerInt_LDD)
   - TI1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TI1_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask).
   - TI1_Disable -Disables the component - it stops signal generation and events calling.

Module "TU2"       (component TimerUnit_LDD)
   - TU2_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable in init. code"> is set to 
                "yes" value then the device is also enabled (see the description of the <Enable> method). In this case the 
                <Enable> method is not necessary and needn't to be generated. This method can be called only once. Before the 
                second call of Init the <Deinit> must be called first.
   - TU2_Enable -Enables the component - it starts the signal generation. Events may be generated (see SetEventMask). The 
                method is not available if the counter can't be disabled/enabled by HW.
   - TU2_Disable -Disables the component - it stops signal generation and events calling. The method is not available if the 
                counter can't be disabled/enabled by HW.

Module "ETH1"      (component Ethernet_LDD)
   - ETH1_Init -Initializes the device. Allocates memory for the device data structure, allocates interrupt vectors and sets 
                interrupt priority, sets pin routing, sets timing, etc. If the property <"Enable device"> is set to "yes" then 
                the device is also enabled (see the description of the <Enable> method). In this case the <Enable> method is 
                not necessary and need not to be generated. This method can be called only once. Before the second call of Init 
                the <Deinit> method must be called first.
   - ETH1_Deinit -Deinitializes the device. Switches off the device, frees the device data structure memory, interrupt vectors, 
                etc.
   - ETH1_SendFrame -Initiates a frame transmission. Frame contents are defined by the specified list of buffer descriptors. 
                Frames are internally queued. The end of the frame transmission is signalized by the OnFrameTransmitted event.
   - ETH1_ReceiveFrame -Initiates frame receptions. Frame contents will be placed into buffers specified by the list of buffers.
                Frames are internally queued. The end of a frame reception is signalized by the OnFrameReceived event.
   - ETH1_ReadMII -Initiates a MII register read operation. The end of the operation is signalized by the OnMIIFinished event 
                in the interrupt mode or by the GetMIIResult method in the polled mode. The value of the register is returned 
                by the GetMIIResult method. This method is available only if management bus is enabled.
   - ETH1_WriteMII -Initiates a MII register write operation. The end of the operation is signalized by the OnMIIFinished event 
                in the interrupt mode or by the GetMIIResult method in the polled mode. This method is available only if 
                management bus is enabled.
   - ETH1_GetMIIResult -If the MII operation has finished, the variable pointed by the Data parameter will contain the value of 
                the addressed MII register. This method is available only if management bus is enabled.

Module "Cmp1"      (component FreescaleAnalogComp)
   - Cmp1_GetAnalogComparatorOutputValue -This method returns current value of the analog comparator output.

Module "PTA"       (component Init_GPIO_VAR0)
   - PTA_Init -This method initializes registers of the GPIO module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "ContactSec" (component BitIO)
   - ContactSec_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].

Module "Cpu"       (component MK60FN1M0LQ15)
   - Cpu_SetOperationMode -This method requests to change the component's operation mode (RUN, WAIT, SLEEP, STOP). The target 
                operation mode will be entered immediately.   See <Operation mode settings> for further details of the 
                operation modes mapping to low power modes of the cpu.
   - Cpu_GetLLSWakeUpFlags -This method returns the current status of the LLWU wake-up flags indicating which wake-up source 
                caused the MCU to exit LLS or VLLSx low power mode.   The following predefined constants can be used to 
                determine the wake-up source:   LLWU_EXT_PIN0, ... LLWU_EXT_PIN15 - external pin 0 .. 15 caused the wake-up   
                LLWU_INT_MODULE0 .. LLWU_INT_MODULE7 - internal module 0..15 caused the wake-up.

===================================================================================
